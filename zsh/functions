# nice extraction tool by http://nparikh.org/notes/zshrc.txt
# Usage: extract <file>
function extract {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}





# verbose completion by https://github.com/holman/dotfiles
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''





# Highlight STDIN based on PCRE patterns.
function highlight {
    local color=33;
    local perl_regex='';
    while [ $# -gt 0 ]; do
        local brightness=1;
        local param="$1";
        if [ "${param:0:2}" = "--" ]; then
            if [[ "${param:2:5}" == "dark-" ]]; then
                    brightness=0;
                    param="--${param:7}";
            elif [ "${param:2:6}" == "light-" ]; then
                    brightness=1;
                    param="--${param:8}";
            fi;
            case "${param:2}" in
                'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'pink' | 'cyan' | 'white')
                    param="--color=${param:2}";
                    ;;
            esac;
        fi;
        if [[ "${param:0:8}" = '--color=' ]]; then
            case ${param:8} in
                'black')
                    color=30;;
                'red')
                    color=31;;
                'green')
                    color=32;;
                'yellow')
                    color=33;;
                'blue')
                    color=34;;
                'magenta' | 'pink')
                    color=35;;
                'cyan')
                    color=36;;
                'white')
                    color=37;;
                *) echo default;;
            esac
            shift;
        fi
        perl_regex="$perl_regex;s@${1//@/\\@/}@$(echo -n $'\e['$brightness';'$color'm$&'$'\e[m')@g";
        shift;
    done;
    perl -p -e "select(STDOUT); $| = 1; ${perl_regex:1}";
}





# cd into whatever is the forefront Finder window.
# stolen from https://github.com/paulirish/dotfiles/commit/e67d1bc03
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}





function toggle_hidden_files() {
    show=`defaults read com.apple.finder AppleShowAllFiles`
    if [ $show -eq 1 ]; then
        echo "setting AppleShowAllFiles 0";
        defaults write com.apple.finder AppleShowAllFiles 0
    else
        echo "setting AppleShowAllFiles 1";
        defaults write com.apple.finder AppleShowAllFiles 1
    fi
    restart_finder
}





function restart_finder() {
  #killall Finder;
  echo 'quitting finder…';
  osascript -e 'tell app "Finder" to quit';
  sleep 1;
  echo 'starting finder…';
  open -a Finder.app;
}





function base64() {
  if [ -f $1 ] ; then
    openssl base64 < $1 | tr -d '\n' | pbcopy
  else
      echo "'$1' is not a valid file"
  fi
}





# convert videos to GIFs using ffmpeg and gifsicle
# https://gist.github.com/dergachev/4627207
function giffify () {
  ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - |\
  gifsicle --optimize=3 --delay=3 > "${$1%.*}.gif"
}





# git branch fuzzy search checkout
# https://coderwall.com/p/ba8afa/git-branch-fuzzy-search-checkout
fbr () {
    local branches branch
    branches=$(git branch -a) &&
    branch=$(echo "$branches" | fzf +s +m -e) &&
    git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}





function macfeh() {
    open -b "drabweb.macfeh" "$@"
}





# Plex dev utilities

function pmp-build {
  killall "Plex Media Player"
  cd ~/Sites/plex-media-player/build/
  ninja
  open src/Plex\ Media\ Player.app
}

function pmp-clean {
  # See: https://github.com/plexinc/plex-media-player/
  # brew install ninja
  # brew install mpv --with-shared --HEAD
  pushd .
  cd ~/Sites/plex-media-player
  pyenv local 3.6.4
  rm -rf build/
  mkdir build
  cd build
  cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=output ..
  popd
}

function transifex {
# bail if not master
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$BRANCH" != "master" ]]; then
    echo "Please checkout master";
    return 1;
  fi

# bail if dirty
  if [[ $(git diff --stat) != '' ]]; then
    echo "Please stash changes"
    return 1
  fi

# create update branch name
  I18N_BRANCH="all/$(date +%F)-i18n-update"

# update  master
  git pull
  git checkout -b $I18N_BRANCH

# scan new strings and push
  yarn gulp t:merge
  tx push -s

# pull new strings
  tx pull -f
  yarn gulp t:split

# commit updated translations
  git add .
  git commit -am "All: Update Translations"

  git push -u origin $I18N_BRANCH
}
